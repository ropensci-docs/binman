[{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Basics","text":"binman (Binary Manager) R package allows user manage downloading third party binaries. downloading binaries split three parts: pre-download, download post-download. part download controlled appropriate function: predlfunction, dlfunction postdlfunction respectively.","code":""},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"pre-download-function","dir":"Articles","previous_headings":"Introduction","what":"Pre-Download Function","title":"Basics","text":"pre-download function return -final point named list data.frames. name data.frame corresponds “platform”. individual data.frame composed three columns namely “version”, “url” “file”. named list data.frames can passed assign_directory function.","code":"mypredl_fun <- function(...) {   # code to return named list of data.frames   assign_directory(mynamedlist, \"myappname\") }"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"how-directories-are-assigned","dir":"Articles","previous_headings":"Introduction > Pre-Download Function","what":"How directories are assigned","title":"Basics","text":"Directories assigned using rappdirs package. See rappdirs::user_data_dir OS specific information.","code":""},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"download-function","dir":"Articles","previous_headings":"Introduction","what":"Download Function","title":"Basics","text":"download function take primary input output given assign_directory named list data.frames column names “version”, “url”, “file”, “dir” “exists”. download function process list downloading “url” given directory “dir” assigning file-name “file”. Whether download attempted may dictated value “exists” variable (example overwrite argument download function). download function return single data.frame columns “platform”, “file” “processed”. “platform” column indicates platform file downloaded relates . “file” column gives full path downloaded file. “processed” column indicates whether file downloaded/processed.","code":"mydl_fun <- function(dllist, ...) {   # dllist is output from a predlfunction with final output from assign_directory   # CODE here to perform download     data.frame(     platform = platform,      file = file,     processed = processed,     stringsAsFactors = FALSE   ) }"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"post-download-function","dir":"Articles","previous_headings":"Introduction","what":"Post-Download Function","title":"Basics","text":"post-download function takes primary input output given “download function” data.frame column names “platform”, “file” “processed”. purpose post-download function process downloaded files download. involve changing file properties mode, unzip/untar downloaded zip/tar file etc.","code":""},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"application-yaml-file","dir":"Articles","previous_headings":"Introduction","what":"Application YAML file","title":"Basics","text":"three functions mentioned previously combined together define process downloading binary file. user stipulates required functions arguments way YAML format file. example: defined YAML file processed process_yaml function. YAML file needs define three required functions arguments also define name.","code":"name: superduperapp predlfunction:   \"superduperapp::predl_superduper\":     appname: \"superduperapp\" dlfunction:   \"superduperapp::download_superduper\": [] postdlfunction:   \"superduperapp::postdl_superduper\": []"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"browser-mob-proxy-example","dir":"Articles","previous_headings":"","what":"Browser Mob Proxy example","title":"Basics","text":"following example using binman get github assets project. project https://github.com/lightbody/browsermob-proxy/releases . new version released zipped binary added “asset”. JSON representation project releases available https://api.github.com/repos/lightbody/browsermob-proxy/releases. shall breakdown process three functional parts.","code":""},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"bmp-pre-download","dir":"Articles","previous_headings":"Browser Mob Proxy example","what":"BMP Pre-Download","title":"Basics","text":"Firstly note JSON data parse JSON URL: gives us list 10 releases. GitHub release version number. version data may want tidy : release “assets” associated (zip file). assets contain information need pre-download function. assets item like file-name: URL file: case BMP single platform denote “generic”. pass following: finally pass list assign_directory function: binman package function template github asset type downloads: extra arguments generality basically performs operations outlined .","code":"bmpURL <- \"https://api.github.com/repos/lightbody/browsermob-proxy/releases\" bmpData <- jsonlite::fromJSON(bmpURL) version <- bmpData[[\"tag_name\"]] version [1] \"browsermob-proxy-2.1.2\"        \"browsermob-proxy-2.1.1\"         [3] \"browsermob-proxy-2.1.0\"        \"browsermob-proxy-2.1.0-beta-6\"  [5] \"browsermob-proxy-2.1.0-beta-5\" \"browsermob-proxy-2.1.0-beta-4\"  [7] \"browsermob-proxy-2.1.0-beta-3\" \"browsermob-proxy-2.1.0-beta-2\"  [9] \"browsermob-proxy-2.1.0-beta-1\" \"browsermob-proxy-2.0.0\" versionregex <- c(\"browsermob-proxy-(.*)$\", \"\\\\1\") version <- gsub(versionregex[1], versionregex[2], version) version [1] \"2.1.2\"        \"2.1.1\"        \"2.1.0\"        \"2.1.0-beta-6\" \"2.1.0-beta-5\"  [6] \"2.1.0-beta-4\" \"2.1.0-beta-3\" \"2.1.0-beta-2\" \"2.1.0-beta-1\" \"2.0.0\" assets <- bmpData[[\"assets\"]] length(assets) [1] 10 bmpFiles <- vapply(assets, \"[[\", character(1), \"name\") bmpFiles [1] \"browsermob-proxy-2.1.2-bin.zip\"        \"browsermob-proxy-2.1.1-bin.zip\"         [3] \"browsermob-proxy-2.1.0-bin.zip\"        \"browsermob-proxy-2.1.0-beta-6-bin.zip\"  [5] \"browsermob-proxy-2.1.0-beta-5-bin.zip\" \"browsermob-proxy-2.1.0-beta-4-bin.zip\"  [7] \"browsermob-proxy-2.1.0-beta-3-bin.zip\" \"browsermob-proxy-2.1.0-beta-2-bin.zip\"  [9] \"browsermob-proxy-2.1.0-beta-1-bin.zip\" \"browsermob-proxy-2.0.0-bin.zip\" bmpURLs <- vapply(assets, \"[[\", character(1), \"browser_download_url\") bmpURLs [1] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.2/browsermob-proxy-2.1.2-bin.zip\"                [2] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.1/browsermob-proxy-2.1.1-bin.zip\"                [3] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0/browsermob-proxy-2.1.0-bin.zip\"                [4] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-6/browsermob-proxy-2.1.0-beta-6-bin.zip\"  [5] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-5/browsermob-proxy-2.1.0-beta-5-bin.zip\"  [6] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-4/browsermob-proxy-2.1.0-beta-4-bin.zip\"  [7] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-3/browsermob-proxy-2.1.0-beta-3-bin.zip\"  [8] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-2/browsermob-proxy-2.1.0-beta-2-bin.zip\"  [9] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-1/browsermob-proxy-2.1.0-beta-1-bin.zip\" [10] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.0.0/browsermob-proxy-2.0.0-bin.zip\" dllist <- list(   \"generic\" = data.frame(     version = version,     url = bmpURLs,     file = bmpFiles,     stringsAsFactors = FALSE   ) ) predlOut <- assign_directory(dllist, \"bmpApp\") str(predlOut, max.level = 2) List of 1  $ generic:'data.frame':    10 obs. of  5 variables:   ..$ version: chr [1:10] \"2.1.2\" \"2.1.1\" \"2.1.0\" \"2.1.0-beta-6\" ...   ..$ url    : chr [1:10] \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.2/browsermob-proxy-2.1.2-bin.zip\" \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.1/browsermob-proxy-2.1.1-bin.zip\" \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0/browsermob-proxy-2.1.0-bin.zip\" \"https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0-beta-6/browsermob-proxy-2.1.0-beta-6-bin\"| __truncated__ ...   ..$ file   : chr [1:10] \"browsermob-proxy-2.1.2-bin.zip\" \"browsermob-proxy-2.1.1-bin.zip\" \"browsermob-proxy-2.1.0-bin.zip\" \"browsermob-proxy-2.1.0-beta-6-bin.zip\" ...   ..$ dir    :List of 10   ..$ exists : logi [1:10] FALSE FALSE FALSE FALSE FALSE FALSE ... dllist <- predl_github_assets(   url = \"https://api.github.com/repos/lightbody/browsermob-proxy/releases\",   history = 3L,    platform = \"generic\",   appname = \"bmproxy\",    platformregex = \"browsermob-proxy\",   versionregex = c(\"browsermob-proxy-(.*)$\", \"\\\\1\") )"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"bmp-download","dir":"Articles","previous_headings":"Browser Mob Proxy example","what":"BMP Download","title":"Basics","text":"download BMP straightforward: platform (one “generic” platform case) want loop data.frame downloading data “url” “file” “dir”. already “exists” may perform download. binman simple template function : simply need pass list pre download function download function.","code":"dllist[[\"generic\"]][1,] version 1   2.1.2                                                                                                                     url 1 https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.2/browsermob-proxy-2.1.2-bin.zip                             file                                                  dir 1 browsermob-proxy-2.1.2-bin.zip /home/john/.local/share/binman_bmproxy/generic/2.1.2   exists 1  FALSE dlfiles <- download_files(dllist)"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"bmp-post-download","dir":"Articles","previous_headings":"Browser Mob Proxy example","what":"BMP Post Download","title":"Basics","text":"files receive Browser mob Proxy project zipped. post processing operation like unzip files. result unzipping files directory structure. case change mode ultimate binary contained directory structure. binman simple template function unzip/untar downloaded file pass output download :","code":"dlres <- unziptar_dlfiles(dlfiles)"},{"path":"https://docs.ropensci.org/binman/articles/basics.html","id":"bmp-yaml","dir":"Articles","previous_headings":"Browser Mob Proxy example","what":"BMP YAML","title":"Basics","text":"can incorporate three functional calls YAML file Browser Mob Proxy application follows: saved file binman package: can now use process-yaml function download BMP binaries: Looking resulting directory structure (Linux location directories OS dependent): see binman downloaded unzipped binaries appropriate directories.","code":"name: bmproxy predlfunction:   \"binman::predl_github_assets\":     url: \"https://api.github.com/repos/lightbody/browsermob-proxy/releases\"     platform:     - generic     history: 3     appname: \"bmproxy\"     platformregex:     - \"browsermob-proxy\"     versionregex:     - \"browsermob-proxy-(.*)$\"     - \"\\\\1\" dlfunction:   \"binman::download_files\": [] postdlfunction:   \"binman::unziptar_dlfiles\": [] ymlfile <- system.file(\"examples\", \"yaml\", \"bmproxy.yml\", package = \"binman\") process_yaml(ymlfile) BEGIN: PREDOWNLOAD BEGIN: DOWNLOAD Creating directory: /home/john/.local/share/binman_bmproxy/generic/2.1.2 Downloading binary: https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.2/browsermob-proxy-2.1.2-...  Creating directory: /home/john/.local/share/binman_bmproxy/generic/2.1.1 Downloading binary: https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.1/browsermob-proxy-2.1.1-...  Creating directory: /home/john/.local/share/binman_bmproxy/generic/2.1.0 Downloading binary: https://github.com/lightbody/browsermob-proxy/releases/download/browsermob-proxy-2.1.0/browsermob-proxy-2.1.0-...  BEGIN: POSTDOWNLOAD tree -d /home/john/.local/share/binman_bmproxy /home/john/.local/share/binman_bmproxy └── generic     ├── 2.1.0     │   └── browsermob-proxy-2.1.0     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     ├── 2.1.1     │   └── browsermob-proxy-2.1.1     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     └── 2.1.2         └── browsermob-proxy-2.1.2             ├── bin             │   └── conf             ├── lib             └── ssl-support"},{"path":"https://docs.ropensci.org/binman/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Harrison. Author.            original author Ju Yeong Kim. Author.            rOpenSci maintainer Jonathan Völkle. Maintainer.","code":""},{"path":"https://docs.ropensci.org/binman/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harrison J, Kim J (2024). binman: Binary Download Manager. R package version 0.1.3, https://github.com/ropensci/binman, https://docs.ropensci.org/binman/.","code":"@Manual{,   title = {binman: A Binary Download Manager},   author = {John Harrison and Ju Yeong Kim},   year = {2024},   note = {R package version 0.1.3, https://github.com/ropensci/binman},   url = {https://docs.ropensci.org/binman/}, }"},{"path":"https://docs.ropensci.org/binman/index.html","id":"binman","dir":"","previous_headings":"","what":"A Binary Download Manager","title":"A Binary Download Manager","text":"Tools functions managing download binary files. Binary repositories defined YAML format. Defining new pre-download, download post-download templates allow additional repositories added.","code":""},{"path":"https://docs.ropensci.org/binman/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Binary Download Manager","text":"can install binman GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"ropensci/binman\")"},{"path":[]},{"path":"https://docs.ropensci.org/binman/index.html","id":"github-assets","dir":"","previous_headings":"Usage Examples","what":"GitHub Assets","title":"A Binary Download Manager","text":"following example using binman get GitHub assets project. project https://github.com/lightbody/browsermob-proxy/releases . new version released zipped binary added “asset”. JSON representation project releases available https://api.github.com/repos/lightbody/browsermob-proxy/releases. binman needs YAML file specify parse projects assets: file can accessed : Downloading three recent releases can done using: resulting directory structure (omit files brevity):","code":"name: binman-bmproxy predlfunction:   \"binman::predl_github_assets\":     url: https://api.github.com/repos/lightbody/browsermob-proxy/releases     platform:     - generic     history: 3     appname: \"binman_bmproxy\"     platformregex: browsermob-proxy dlfunction:   \"binman::download_files\": [] postdlfunction:   \"binman::unziptar_dlfiles\": [] ymlfile <- system.file(\"examples\", \"yaml\", \"bmproxy.yml\", package = \"binman\") process_yaml(ymlfile)"},{"path":"https://docs.ropensci.org/binman/index.html","id":"linux","dir":"","previous_headings":"Usage Examples > GitHub Assets","what":"LINUX","title":"A Binary Download Manager","text":"","code":"john@ubuntu:~$ tree -d /home/john/.local/share/binman_bmproxy /home/john/.local/share/binman_bmproxy └── generic     ├── browsermob-proxy-2.1.0     │   └── browsermob-proxy-2.1.0     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     ├── browsermob-proxy-2.1.1     │   └── browsermob-proxy-2.1.1     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     └── browsermob-proxy-2.1.2         └── browsermob-proxy-2.1.2             ├── bin             │   └── conf             ├── lib             └── ssl-support  19 directories"},{"path":"https://docs.ropensci.org/binman/index.html","id":"windows","dir":"","previous_headings":"Usage Examples > GitHub Assets","what":"WINDOWS","title":"A Binary Download Manager","text":"","code":"C:\\Users\\john>tree C:\\Users\\john\\AppData\\Local\\binman\\binman_bmproxy Folder PATH listing Volume serial number is 7CC8-BD03 C:\\USERS\\JOHN\\APPDATA\\LOCAL\\BINMAN\\BINMAN_BMPROXY └───generic     ├───browsermob-proxy-2.1.0     │   └───browsermob-proxy-2.1.0     │       ├───bin     │       │   └───conf     │       ├───lib     │       └───ssl-support     ├───browsermob-proxy-2.1.1     │   └───browsermob-proxy-2.1.1     │       ├───bin     │       │   └───conf     │       ├───lib     │       └───ssl-support     └───browsermob-proxy-2.1.2         └───browsermob-proxy-2.1.2             ├───bin             │   └───conf             ├───lib             └───ssl-support"},{"path":"https://docs.ropensci.org/binman/index.html","id":"macosx","dir":"","previous_headings":"Usage Examples > GitHub Assets","what":"MACOSX","title":"A Binary Download Manager","text":"","code":"DE529:~ admin$ tree -d /Users/admin/Library/Application\\ Support/binman_bmproxy /Users/admin/Library/Application\\ Support/binman_bmproxy └── generic     ├── browsermob-proxy-2.1.0     │   └── browsermob-proxy-2.1.0     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     ├── browsermob-proxy-2.1.1     │   └── browsermob-proxy-2.1.1     │       ├── bin     │       │   └── conf     │       ├── lib     │       └── ssl-support     └── browsermob-proxy-2.1.2         └── browsermob-proxy-2.1.2             ├── bin             │   └── conf             ├── lib             └── ssl-support 19 directories"},{"path":"https://docs.ropensci.org/binman/reference/app_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get application directory — app_dir","title":"Get application directory — app_dir","text":"Get application directory","code":""},{"path":"https://docs.ropensci.org/binman/reference/app_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get application directory — app_dir","text":"","code":"app_dir(appname, check = TRUE)"},{"path":"https://docs.ropensci.org/binman/reference/app_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get application directory — app_dir","text":"appname character string giving name application check check whether app given appname exists .","code":""},{"path":"https://docs.ropensci.org/binman/reference/app_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get application directory — app_dir","text":"character string giving path directory","code":""},{"path":"https://docs.ropensci.org/binman/reference/app_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get application directory — app_dir","text":"","code":"if (FALSE) { appdir <- app_dir(\"superduperapp\", FALSE) }"},{"path":"https://docs.ropensci.org/binman/reference/assign_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign directory — assign_directory","title":"Assign directory — assign_directory","text":"Assign directory download list","code":""},{"path":"https://docs.ropensci.org/binman/reference/assign_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign directory — assign_directory","text":"","code":"assign_directory(dllist, appname)"},{"path":"https://docs.ropensci.org/binman/reference/assign_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign directory — assign_directory","text":"dllist named list data.frames. name indicates platform. data.frame contain version, url file processed. appname Name give app","code":""},{"path":"https://docs.ropensci.org/binman/reference/assign_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign directory — assign_directory","text":"named list data.frames. data.frame contain     version, url file processed, directory download     file whether file already exists.","code":""},{"path":"https://docs.ropensci.org/binman/reference/assign_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign directory — assign_directory","text":"","code":"if (FALSE) { tdata <- system.file(\"testdata\", \"test_dllist.Rdata\", package = \"binman\") load(tdata) assign_directory(test_dllist, \"myapp\") }"},{"path":"https://docs.ropensci.org/binman/reference/binman.html","id":null,"dir":"Reference","previous_headings":"","what":"binman — binman","title":"binman — binman","text":"Binary Download Manager.","code":""},{"path":"https://docs.ropensci.org/binman/reference/binman.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"binman — binman","text":"Tools functions managing download binary files. Binary repositories defined 'YAML' format. Defining new pre-download, download post-download templates allow additional repositories added.","code":""},{"path":"https://docs.ropensci.org/binman/reference/download_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Download binaries — download_files","title":"Download binaries — download_files","text":"Download binaries repository","code":""},{"path":"https://docs.ropensci.org/binman/reference/download_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download binaries — download_files","text":"","code":"download_files(dllist, overwrite = FALSE)"},{"path":"https://docs.ropensci.org/binman/reference/download_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download binaries — download_files","text":"dllist named list data.frames. data.frame contain version, url file processed, directory download file whether file already exists. overwrite Overwrite existing binaries. Default value FALSE","code":""},{"path":"https://docs.ropensci.org/binman/reference/download_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download binaries — download_files","text":"data.frame indicating whether file     downloaded platform.","code":""},{"path":"https://docs.ropensci.org/binman/reference/download_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download binaries — download_files","text":"","code":"if (FALSE) { trdata <- system.file(\"testdata\", \"test_dlres.Rdata\", package = \"binman\") tldata <- system.file(\"testdata\", \"test_dllist.Rdata\", package = \"binman\") load(trdata) load(tldata) dllist <- assign_directory(test_dllist, \"myapp\") testthat::with_mock(   `httr::GET` = function(...) {     test_llres   },   `base::dir.create` = function(...) {     TRUE   },   dlfiles <- download_files(dllist) ) }"},{"path":"https://docs.ropensci.org/binman/reference/increment_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — increment_version","title":"Objects exported from other packages — increment_version","text":"objects imported packages. Follow links see documentation. semver increment_version","code":""},{"path":"https://docs.ropensci.org/binman/reference/list_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"List app versions — list_versions","title":"List app versions — list_versions","text":"List app versions platform","code":""},{"path":"https://docs.ropensci.org/binman/reference/list_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List app versions — list_versions","text":"","code":"list_versions(appname, platform = c(\"ALL\"))"},{"path":"https://docs.ropensci.org/binman/reference/list_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List app versions — list_versions","text":"appname character string giving name application platform character vector platforms list. Defaults \"\"","code":""},{"path":"https://docs.ropensci.org/binman/reference/list_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List app versions — list_versions","text":"list platforms version directories","code":""},{"path":"https://docs.ropensci.org/binman/reference/list_versions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List app versions — list_versions","text":"","code":"if (FALSE) { appdir <- app_dir(\"superduperapp\", FALSE) platforms <- LETTERS[1:4] versions <- LETTERS[5:7] mkdirs <- file.path(appdir, outer(platforms, versions, file.path)) chk <- vapply(mkdirs, dir.create, logical(1), recursive = TRUE) expect_true(all(chk)) res <- list_versions(\"superduperapp\") unlink(appdir, recursive = TRUE) }"},{"path":"https://docs.ropensci.org/binman/reference/noproc_dlfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Do not post process — noproc_dlfiles","title":"Do not post process — noproc_dlfiles","text":"post process dlfiles","code":""},{"path":"https://docs.ropensci.org/binman/reference/noproc_dlfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Do not post process — noproc_dlfiles","text":"","code":"noproc_dlfiles(dlfiles)"},{"path":"https://docs.ropensci.org/binman/reference/noproc_dlfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Do not post process — noproc_dlfiles","text":"dlfiles data.frame files platform indicating whether processed","code":""},{"path":"https://docs.ropensci.org/binman/reference/noproc_dlfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Do not post process — noproc_dlfiles","text":"Returns list character vectors indicating files     processed","code":""},{"path":"https://docs.ropensci.org/binman/reference/noproc_dlfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Do not post process — noproc_dlfiles","text":"","code":"if (FALSE) { ymlfile <- system.file(\"exdata\", \"sampleapp4.yml\", package = \"binman\") trdata <- system.file(\"testdata\", \"test_dlres.Rdata\", package = \"binman\") load(trdata) testthat::with_mock(   `httr::GET` = function(...) {     test_llres   },   `base::dir.create` = function(...) {     TRUE   },   procyml <- process_yaml(ymlfile) ) procyml }"},{"path":"https://docs.ropensci.org/binman/reference/parse_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — parse_version","title":"Objects exported from other packages — parse_version","text":"objects imported packages. Follow links see documentation. semver parse_version","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_bitbucket_downloads.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre download bitbucket downloads — predl_bitbucket_downloads","title":"Pre download bitbucket downloads — predl_bitbucket_downloads","text":"Pre download bitbucket downloads template function","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_bitbucket_downloads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre download bitbucket downloads — predl_bitbucket_downloads","text":"","code":"predl_bitbucket_downloads(   url,   platform,   history,   appname,   platformregex = platform,   versionregex = \"\\\\d+(?:\\\\.\\\\d+)+\" )"},{"path":"https://docs.ropensci.org/binman/reference/predl_bitbucket_downloads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre download bitbucket downloads — predl_bitbucket_downloads","text":"url url giving bitbucket download JSON project. example https://bitbucket.org/ariya/phantomjs/downloads phantomjs project asset JSON available https://api.bitbucket.org/2.0/repositories/ariya/phantomjs/downloads?pagelen=100 platform character vector platform names history maximum number files get platform appname Name app platformregex filter platforms. Defaults platform versionregex regex retrieving version.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_bitbucket_downloads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre download bitbucket downloads — predl_bitbucket_downloads","text":"named list data.frames. name indicates     platform. data.frame contain version, url file     processed. Used input download_files     equivalent.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_bitbucket_downloads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre download bitbucket downloads — predl_bitbucket_downloads","text":"","code":"if (FALSE) { bbdata <- system.file(\"testdata\", \"test_bitbucketdl.json\",   package = \"binman\" ) platform <- c(\"linux64\", \"linux32\", \"windows\", \"macosx\") platformregex <- c(\"linux-x86_64\", \"linux-i686\", \"windows\", \"macosx\") bbdllist <-   predl_bitbucket_downloads(     url = bbdata, platform, history = 3L,     appname = \"binman_chromedriver\",     platformregex   ) }"},{"path":"https://docs.ropensci.org/binman/reference/predl_github_assets.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre download Github assets — predl_github_assets","title":"Pre download Github assets — predl_github_assets","text":"Pre download Github assets template function","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_github_assets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre download Github assets — predl_github_assets","text":"","code":"predl_github_assets(   url,   platform,   history,   appname,   fileregex = \"\",   platformregex = platform,   versionregex = c(\"\", \"\") )"},{"path":"https://docs.ropensci.org/binman/reference/predl_github_assets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre download Github assets — predl_github_assets","text":"url url giving github asset JSON project. example https://github.com/mozilla/geckodriver/releases geckodriver project asset JSON available https://api.github.com/repos/mozilla/geckodriver/releases platform character vector platform names history maximum number files get platform appname Name app fileregex filter files platformregex filter platforms. Defaults platform versionregex regex retrieving version.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_github_assets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre download Github assets — predl_github_assets","text":"named list data.frames. name indicates     platform. data.frame contain version, url file     processed. Used input download_files     equivalent.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_github_assets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre download Github assets — predl_github_assets","text":"","code":"if (FALSE) { gadata <- system.file(\"testdata\", \"test_gitassets.json\",   package = \"binman\" ) platform <- c(\"linux64\", \"win64\", \"macos\") gadllist <- predl_github_assets(   url = gadata, platform, history = 3L,   appname = \"binman_chromedriver\" ) }"},{"path":"https://docs.ropensci.org/binman/reference/predl_google_storage.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-Download Google Storage — predl_google_storage","title":"Pre-Download Google Storage — predl_google_storage","text":"Pre-Download Google Storage template function","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_google_storage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-Download Google Storage — predl_google_storage","text":"","code":"predl_google_storage(   url,   platform,   history,   appname,   fileregex = \"\\\\.zip$\",   platformregex = platform,   versionregex = c(paste0(\"(.*)/.*\", fileregex), \"\\\\1\") )"},{"path":"https://docs.ropensci.org/binman/reference/predl_google_storage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-Download Google Storage — predl_google_storage","text":"url url giving JSON bucket listings project. example: http://chromedriver.storage.googleapis.com/index.html lists chromedriver files https://www.googleapis.com/storage/v1/b/chromedriver/o/ JSON listings project. platform character vector platform names history maximum number files get platform appname Name app fileregex filter files platformregex filter platforms. Defaults platform names. versionregex regex retrieving version.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_google_storage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-Download Google Storage — predl_google_storage","text":"named list data.frames. name indicates     platform. data.frame contain version, url file     processed. Used input download_files     equivalent.","code":""},{"path":"https://docs.ropensci.org/binman/reference/predl_google_storage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-Download Google Storage — predl_google_storage","text":"","code":"if (FALSE) { gsdata <- system.file(\"testdata\", \"test_googstor.json\",   package = \"binman\" ) platform <- c(\"linux64\", \"win32\", \"mac64\") gsdllist <- predl_google_storage(   url = gsdata, platform, history = 5L,   appname = \"binman_chromedriver\" ) }"},{"path":"https://docs.ropensci.org/binman/reference/process_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a yaml file — process_yaml","title":"Process a yaml file — process_yaml","text":"Process yaml file. file defines pre-download function,     download function post download function.","code":""},{"path":"https://docs.ropensci.org/binman/reference/process_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a yaml file — process_yaml","text":"","code":"process_yaml(ymlfile, verbose = TRUE)"},{"path":"https://docs.ropensci.org/binman/reference/process_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a yaml file — process_yaml","text":"ymlfile file YAML format defining pre-download/ download post download functions together arguments. verbose TRUE, include status messages ()","code":""},{"path":"https://docs.ropensci.org/binman/reference/process_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a yaml file — process_yaml","text":"list files processed (downloaded post processed)","code":""},{"path":"https://docs.ropensci.org/binman/reference/process_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a yaml file — process_yaml","text":"","code":"if (FALSE) { ymlfile <- system.file(\"exdata\", \"sampleapp.yml\", package = \"binman\") trdata <- system.file(\"testdata\", \"test_dlres.Rdata\", package = \"binman\") load(trdata) testthat::with_mock(   `httr::GET` = function(...) {     test_llres   },   `base::dir.create` = function(...) {     TRUE   },   `utils::unzip` = function(zipfile, ...) {     zipfile   },   procyml <- process_yaml(ymlfile) ) procyml }"},{"path":"https://docs.ropensci.org/binman/reference/render_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — render_version","title":"Objects exported from other packages — render_version","text":"objects imported packages. Follow links see documentation. semver render_version","code":""},{"path":"https://docs.ropensci.org/binman/reference/reset_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reset_version","title":"Objects exported from other packages — reset_version","text":"objects imported packages. Follow links see documentation. semver reset_version","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_platform.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove application platform — rm_platform","title":"Remove application platform — rm_platform","text":"Remove application files/directories given platform","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_platform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove application platform — rm_platform","text":"","code":"rm_platform(appname, platform = c(\"ALL\"))"},{"path":"https://docs.ropensci.org/binman/reference/rm_platform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove application platform — rm_platform","text":"appname character string giving name application platform character vector indicating platform remove. Defaults \"\"","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_platform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove application platform — rm_platform","text":"Returns logical vector indicating whether removal     platform successful. Return invisible.","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_platform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove application platform — rm_platform","text":"","code":"if (FALSE) { appdir <- app_dir(appname, FALSE) platforms <- LETTERS[1:4] versions <- LETTERS[5:7] mkdirs <- file.path(appdir, outer(platforms, versions, file.path)) chk <- vapply(mkdirs, dir.create, logical(1), recursive = TRUE) appver <- list_versions(appname) rm_platform(appname, platforms[2:3]) unlink(appdir, recursive = TRUE) }"},{"path":"https://docs.ropensci.org/binman/reference/rm_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove application version — rm_version","title":"Remove application version — rm_version","text":"Remove application version given platform","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove application version — rm_version","text":"","code":"rm_version(appname, platform, version = c(\"ALL\"))"},{"path":"https://docs.ropensci.org/binman/reference/rm_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove application version — rm_version","text":"appname character string giving name application platform character string indicating platform. version character vector versions remove. Defaults \"\"","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove application version — rm_version","text":"Returns logical vector indicating whether removal     version successful. Return invisible.","code":""},{"path":"https://docs.ropensci.org/binman/reference/rm_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove application version — rm_version","text":"","code":"if (FALSE) { appdir <- app_dir(appname, FALSE) platforms <- LETTERS[1:4] versions <- LETTERS[5:7] mkdirs <- file.path(appdir, outer(platforms, versions, file.path)) chk <- vapply(mkdirs, dir.create, logical(1), recursive = TRUE) appver <- list_versions(appname) rm_version(appname, platforms[2], versions[1:2]) unlink(appdir, recursive = TRUE) }"},{"path":"https://docs.ropensci.org/binman/reference/set_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — set_version","title":"Objects exported from other packages — set_version","text":"objects imported packages. Follow links see documentation. semver set_version","code":""},{"path":"https://docs.ropensci.org/binman/reference/unziptar_dlfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Unzip/Untar downloaded files — unziptar_dlfiles","title":"Unzip/Untar downloaded files — unziptar_dlfiles","text":"Unzip/Untar downloaded files. Keeps original zip file","code":""},{"path":"https://docs.ropensci.org/binman/reference/unziptar_dlfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unzip/Untar downloaded files — unziptar_dlfiles","text":"","code":"unziptar_dlfiles(dlfiles, chmod = FALSE)"},{"path":"https://docs.ropensci.org/binman/reference/unziptar_dlfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unzip/Untar downloaded files — unziptar_dlfiles","text":"dlfiles data.frame files platform indicating whether processed chmod change mode unarchived file/files \"755\" executable unix like systems.","code":""},{"path":"https://docs.ropensci.org/binman/reference/unziptar_dlfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unzip/Untar downloaded files — unziptar_dlfiles","text":"Returns list character vectors indicating files     processed","code":""},{"path":"https://docs.ropensci.org/binman/reference/unziptar_dlfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unzip/Untar downloaded files — unziptar_dlfiles","text":"","code":"if (FALSE) { ymlfile <- system.file(\"exdata\", \"sampleapp.yml\", package = \"binman\") trdata <- system.file(\"testdata\", \"test_dlres.Rdata\", package = \"binman\") load(trdata) testthat::with_mock(   `httr::GET` = function(...) {     test_llres   },   `base::dir.create` = function(...) {     TRUE   },   `utils::unzip` = function(zipfile, ...) {     zipfile   },   procyml <- process_yaml(ymlfile) ) procyml }"},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-013","dir":"Changelog","previous_headings":"","what":"binman 0.1.3","title":"binman 0.1.3","text":"CRAN release: 2022-09-01 Add file regex filter downloading GitHub assets","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-012","dir":"Changelog","previous_headings":"","what":"binman 0.1.2","title":"binman 0.1.2","text":"CRAN release: 2020-10-02 Fixed bug assertion function (thanks @vjcitn #6) Addressed CRAN warnings notes","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-011","dir":"Changelog","previous_headings":"","what":"binman 0.1.1","title":"binman 0.1.1","text":"CRAN release: 2018-07-18 Fixed tests CRAN re-submission.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-010","dir":"Changelog","previous_headings":"","what":"binman 0.1.0","title":"binman 0.1.0","text":"CRAN release: 2017-01-14 Add verbose argument process_yaml. Moved semantic versioning separate package","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-008","dir":"Changelog","previous_headings":"","what":"binman 0.0.8","title":"binman 0.0.8","text":"Add semantic version parsing.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-006","dir":"Changelog","previous_headings":"","what":"binman 0.0.6","title":"binman 0.0.6","text":"Added vignette basic functionality binman.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-005","dir":"Changelog","previous_headings":"","what":"binman 0.0.5","title":"binman 0.0.5","text":"“binman_” now prepended root directory app prevent possible name clashes. Add bzip2 file format unziptar_dlfiles","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-004","dir":"Changelog","previous_headings":"","what":"binman 0.0.4","title":"binman 0.0.4","text":"Added list_versions function, docs test list application version platform. Added rm_version function, docs test remove application versions platform. Added rm_platform function, docs test remove application platform. Added app_dir function, docs test return applications root directory.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-003","dir":"Changelog","previous_headings":"","what":"binman 0.0.3","title":"binman 0.0.3","text":"Added Apveyor CI windows Update post download zip function handle tar chmod","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-002","dir":"Changelog","previous_headings":"","what":"binman 0.0.2","title":"binman 0.0.2","text":"Added github assets pre download template. Added bitbucket downloads pre download template.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-001","dir":"Changelog","previous_headings":"","what":"binman 0.0.1","title":"binman 0.0.1","text":"Added download_files, assign_directory functions. Added google storage pre download template.","code":""},{"path":"https://docs.ropensci.org/binman/news/index.html","id":"binman-0009000","dir":"Changelog","previous_headings":"","what":"binman 0.0.0.9000","title":"binman 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
